class Solution {
    public int[] getStrongest(int[] arr, int k) {
        Arrays.sort(arr);
        PriorityQueue<Map.Entry<Integer, Integer>>pq = new PriorityQueue<>((a,b)-> 
                                                                           b.getValue()-a.getValue()==0 ? b.getKey()-a.getKey(): b.getValue()-a.getValue());
        int mid = arr[(arr.length-1)/2];
        Map<Integer,Integer>hm = new HashMap<>();
        for(int i =0; i<arr.length; i++){
            hm.put(i, Math.abs(arr[i]-mid));
        }
        for(Map.Entry<Integer, Integer>map:hm.entrySet()){
            pq.offer(map);
        }
        int []temp = new int[k];
        while(k!=0){
            temp[k-1]=arr[pq.poll().getKey()];
            k--;
        }
        return temp;
    }
}
